{
    "swagger": "2.0",
    "info": {
        "description": "sakalWeb Information System v5 RESTful API documentation",
        "title": "swis-api (swapi) v5",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://savla.dev/swapi",
            "email": "krusty@savla.dev"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/savla-dev/swis-api/blob/master/LICENSE"
        },
        "version": "5.16.9"
    },
    "host": "swis-api-run-prod:8050",
    "basePath": "/",
    "paths": {
        "/alvax": {
            "get": {
                "description": "get alvax config list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alvax"
                ],
                "summary": "Get all alvax configs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_alvax.ConfigRoot"
                            }
                        }
                    }
                }
            }
        },
        "/alvax/restore": {
            "post": {
                "description": "upload alvax config JSON dump and restore the data model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alvax"
                ],
                "summary": "Upload alvax configs dump -- restore configs",
                "responses": {}
            }
        },
        "/alvax/types": {
            "get": {
                "description": "list package model's field types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alvax"
                ],
                "summary": "List package model's field types",
                "responses": {}
            }
        },
        "/alvax/{key}": {
            "get": {
                "description": "get alvax config by key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alvax"
                ],
                "summary": "Get alvax config by key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_alvax.ConfigRoot"
                        }
                    }
                }
            },
            "put": {
                "description": "update alvax config by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alvax"
                ],
                "summary": "Update alvax config by its ID",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_alvax.ConfigRoot"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_alvax.ConfigRoot"
                        }
                    }
                }
            },
            "post": {
                "description": "add new alvax config",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alvax"
                ],
                "summary": "Add new alvax config",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_alvax.ConfigRoot"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_alvax.ConfigRoot"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete alvax config by its key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alvax"
                ],
                "summary": "Delete alvax config by its key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "alvax config key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_alvax.ConfigRoot"
                        }
                    }
                }
            }
        },
        "/backups": {
            "get": {
                "description": "get backed up services",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Get all backed up services",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/backups/restore": {
            "post": {
                "description": "upload backups JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Upload backups dump backup -- restores all backup services",
                "responses": {}
            }
        },
        "/backups/types": {
            "get": {
                "description": "list package model's field types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "List package model's field types",
                "responses": {}
            }
        },
        "/backups/{key}": {
            "get": {
                "description": "get backup status by project'S/service's key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Get backup status by project's/service's key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "backup service key",
                        "name": "host",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "update backup status by service's key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Update backup status by service's key",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_backups.Backup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_backups.Backup"
                        }
                    }
                }
            },
            "post": {
                "description": "add new backed up service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Add new backed up serivce",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_backups.Backup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_backups.Backup"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete backup service by its key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Delete backup service by its key",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/backups/{key}/active": {
            "put": {
                "description": "active/inactive backup toggle by its key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Acitive/inactive backup toggle by its key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "service key",
                        "name": "service_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_backups.Backup"
                        }
                    }
                }
            }
        },
        "/business": {
            "get": {
                "description": "get business entities list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business"
                ],
                "summary": "Get all business entities",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_business.Business"
                            }
                        }
                    }
                }
            }
        },
        "/business/restore": {
            "post": {
                "description": "upload business JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business"
                ],
                "summary": "Upload business dump backup -- restores all business entities",
                "responses": {}
            }
        },
        "/business/types": {
            "get": {
                "description": "list package model's field types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business"
                ],
                "summary": "List package model's field types",
                "responses": {}
            }
        },
        "/business/{key}": {
            "get": {
                "description": "get business by key param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business"
                ],
                "summary": "Get business entity by its key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_business.Business"
                        }
                    }
                }
            },
            "put": {
                "description": "update business entity by its key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business"
                ],
                "summary": "Update business entity by its key",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_business.Business"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_business.Business"
                        }
                    }
                }
            },
            "post": {
                "description": "add new business entity",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business"
                ],
                "summary": "Add new business entity",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_business.Business"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_business.Business"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete business by its key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business"
                ],
                "summary": "Delete business by its key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "business ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_business.Business"
                        }
                    }
                }
            }
        },
        "/depots": {
            "get": {
                "description": "get depot complete list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "depots"
                ],
                "summary": "Get all depots and their users/owners",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_depots.DepotItem"
                            }
                        }
                    }
                }
            }
        },
        "/depots/items/owner/{owner}": {
            "get": {
                "description": "get depot item list by :owner param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "depots"
                ],
                "summary": "Get depot item list by Owner",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_depots.DepotItem"
                            }
                        }
                    }
                }
            }
        },
        "/depots/items/{key}": {
            "get": {
                "description": "get depot item's details by :key route param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "depots"
                ],
                "summary": "Get depot item by key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_depots.DepotItem"
                        }
                    }
                }
            },
            "put": {
                "description": "update depot by its key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "depots"
                ],
                "summary": "Update depot item by its key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "depot key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_depots.DepotItem"
                        }
                    }
                }
            },
            "post": {
                "description": "add new depot item",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "depots"
                ],
                "summary": "Add new depot item",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_depots.DepotItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_depots.DepotItem"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete depot item by its key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "depots"
                ],
                "summary": "Delete depot item by its key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "depot key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_depots.DepotItem"
                        }
                    }
                }
            }
        },
        "/depots/restore": {
            "post": {
                "description": "upload depots JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "depots"
                ],
                "summary": "Upload depot dump backup -- restores all depot items",
                "responses": {}
            }
        },
        "/depots/types": {
            "get": {
                "description": "list package model's field types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "depots"
                ],
                "summary": "List package model's field types",
                "responses": {}
            }
        },
        "/dish": {
            "get": {
                "description": "get all root items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Get all root items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Other commentary to the incident.",
                        "name": "comment",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Further details about the incident like place, state of operation etc.",
                        "name": "desc",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Estimated end of incident handling/resolving.",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Incident ID, stringified timestamp usually.",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Incident name.",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Public indicates the state of visibility for all.",
                        "name": "public",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Reason of the incident that happened.",
                        "name": "reason",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of the referencing socket(s).\nSocketID []string `json:\"socket_id\"`",
                        "name": "socket_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The very start datetime of such incident.",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Type of incident, e.g. planned, maintenance, outage etc",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Root"
                        }
                    }
                }
            }
        },
        "/dish/incidents": {
            "get": {
                "description": "get all incidents",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Get all incidents",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_dish.Incident"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "add new incident",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Add new incident",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Other commentary to the incident.",
                        "name": "comment",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Further details about the incident like place, state of operation etc.",
                        "name": "desc",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Estimated end of incident handling/resolving.",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Incident ID, stringified timestamp usually.",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Incident name.",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Public indicates the state of visibility for all.",
                        "name": "public",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Reason of the incident that happened.",
                        "name": "reason",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of the referencing socket(s).\nSocketID []string `json:\"socket_id\"`",
                        "name": "socket_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The very start datetime of such incident.",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Type of incident, e.g. planned, maintenance, outage etc",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Incident"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Incident"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Incident"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Incident"
                        }
                    }
                }
            }
        },
        "/dish/incidents/global": {
            "get": {
                "description": "get global incident list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Get global incident list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_dish.Incident"
                            }
                        }
                    }
                }
            }
        },
        "/dish/incidents/public": {
            "get": {
                "description": "get public incident list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Get public incident list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_dish.Incident"
                            }
                        }
                    }
                }
            }
        },
        "/dish/incidents/{key}": {
            "get": {
                "description": "get incident list by socket ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Get incident list by socket ID",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "DishTarget is a string array, usually containing dish's host short name (e.g. frank).\nTo be referred as /dish/sockets/frank for example.",
                        "name": "dish_target",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "If the Host is HTTP/S endpoint, one can specify which HTTP Result/Response codes are okay and not to alert upon.",
                        "name": "expected_http_code_array",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "FailCount indicates how many times socket has to be in failed state before alerting.",
                        "name": "fail_count",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Healthy boolean indicates wheter is socket okay, or the way around.",
                        "name": "healthy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Hostname (server.random.com) or HTTP/S URI (https://endpoint.space).",
                        "name": "host_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Maintenance boolean states for the M. mode being applied to such socket/endpoint.",
                        "name": "maintenance",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Muted bool indicates that the socket is not propagated to any dish if true.",
                        "name": "muted",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "MutedFrom UNIX timestamp.",
                        "name": "muted_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "PathHTTP is any URL the site is about to be tested on, e.g. /dish/sockets",
                        "name": "path_http",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Socket TCP port part\nEven default port 80 should be added here.",
                        "name": "port_tcp",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Public boolean tells the frontendee to show itself.",
                        "name": "public",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "ResponseTime is the time for the request to be processed.",
                        "name": "response_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "More verbose name/description of the socket.",
                        "name": "socket_description",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Socket ID, snake_cased for socket editing and deleting.",
                        "name": "socket_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "GEneric name of the socket, to be used in dish results as failed one endpoint for example.",
                        "name": "socket_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "TestTimestamp tells the time of the last socket testing being executed upon.",
                        "name": "test_timestamp",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_dish.Incident"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Incident"
                        }
                    }
                }
            },
            "put": {
                "description": "update incident by its key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Update incident by its key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Other commentary to the incident.",
                        "name": "comment",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Further details about the incident like place, state of operation etc.",
                        "name": "desc",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Estimated end of incident handling/resolving.",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Incident ID, stringified timestamp usually.",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Incident name.",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Public indicates the state of visibility for all.",
                        "name": "public",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Reason of the incident that happened.",
                        "name": "reason",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of the referencing socket(s).\nSocketID []string `json:\"socket_id\"`",
                        "name": "socket_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The very start datetime of such incident.",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Type of incident, e.g. planned, maintenance, outage etc",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_dish.Incident"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Incident"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Incident"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Incident"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete incident by its key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Delete incident by its key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Other commentary to the incident.",
                        "name": "comment",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Further details about the incident like place, state of operation etc.",
                        "name": "desc",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Estimated end of incident handling/resolving.",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Incident ID, stringified timestamp usually.",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Incident name.",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Public indicates the state of visibility for all.",
                        "name": "public",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Reason of the incident that happened.",
                        "name": "reason",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ID of the referencing socket(s).\nSocketID []string `json:\"socket_id\"`",
                        "name": "socket_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The very start datetime of such incident.",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Type of incident, e.g. planned, maintenance, outage etc",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_dish.Incident"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Incident"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Incident"
                        }
                    }
                }
            }
        },
        "/dish/restore": {
            "post": {
                "description": "restore dish package items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Restore dish package items",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_dish.Incident"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_dish.Incident"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_dish.Incident"
                            }
                        }
                    }
                }
            }
        },
        "/dish/sockets": {
            "get": {
                "description": "get socket list, socket array",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Get all sockets list",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/dish/sockets/public": {
            "get": {
                "description": "get public socket list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Get public socket list",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/dish/sockets/results": {
            "post": {
                "description": "batch update socket's healthy state.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Batch update socket's healthy state.",
                "responses": {}
            }
        },
        "/dish/sockets/status": {
            "get": {
                "description": "subscribe to dish SSE dispatcher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Subscribe to dish SSE dispatcher",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_dish.Message"
                            }
                        }
                    }
                }
            }
        },
        "/dish/sockets/{host}": {
            "get": {
                "description": "get socket list by Host",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Get socket list by host",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dish instance name",
                        "name": "host",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/dish/sockets/{key}": {
            "put": {
                "description": "update socket by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Update socket by its ID",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Socket"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Socket"
                        }
                    }
                }
            },
            "post": {
                "description": "add new socket to socket array",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Adding new socket to socket array",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Socket"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Socket"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete socket by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Delete socket by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dish ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Socket"
                        }
                    }
                }
            }
        },
        "/dish/sockets/{key}/maintenance": {
            "put": {
                "description": "toggle maintenance mode",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Toggle maintenance mode",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name socket by key",
                        "name": "key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_dish.Socket"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Socket"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Socket"
                        }
                    }
                }
            }
        },
        "/dish/sockets/{key}/mute": {
            "put": {
                "description": "toggle muted state",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Toggle muted state",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name socket by key",
                        "name": "key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_dish.Socket"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Socket"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Socket"
                        }
                    }
                }
            }
        },
        "/dish/sockets/{key}/public": {
            "put": {
                "description": "toggle public state",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Toggle public state",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name socket by key",
                        "name": "key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_dish.Socket"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Socket"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/pkg_dish.Socket"
                        }
                    }
                }
            }
        },
        "/dish/types": {
            "get": {
                "description": "list package model's field types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "List package model's field types",
                "responses": {}
            }
        },
        "/finance": {
            "get": {
                "description": "get whole finance package content",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Get whole finance package content",
                "responses": {}
            }
        },
        "/finance/accounts": {
            "get": {
                "description": "get finance complete list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Get all finance accounts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Account"
                        }
                    }
                }
            }
        },
        "/finance/accounts/owner/:key": {
            "get": {
                "description": "get finance accounts by Owner key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Get finance accounts by Owner key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Account"
                        }
                    }
                }
            }
        },
        "/finance/accounts/{key}": {
            "get": {
                "description": "get finance account by its key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Get finance account by its key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Account"
                        }
                    }
                }
            },
            "put": {
                "description": "update finance account by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Update finance account by ID",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Account"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Account"
                        }
                    }
                }
            },
            "post": {
                "description": "add new finance account",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Add new finance account",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Account"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Account"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete finance account by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Delete finance account by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "account ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Account"
                        }
                    }
                }
            }
        },
        "/finance/items": {
            "get": {
                "description": "get account list of items",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Get all account items",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Item"
                        }
                    }
                }
            }
        },
        "/finance/items/account/:key": {
            "get": {
                "description": "get account items by account ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Get account items by account ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Item"
                        }
                    }
                }
            }
        },
        "/finance/items/{key}": {
            "get": {
                "description": "get account item by its key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Get account item by key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Item"
                        }
                    }
                }
            },
            "put": {
                "description": "update account item ba its key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Update account item by its key",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Item"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Item"
                        }
                    }
                }
            },
            "post": {
                "description": "add new account item",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Add new account item",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Item"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Item"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete account item by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Delete account item by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "item ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Item"
                        }
                    }
                }
            }
        },
        "/finance/restore": {
            "post": {
                "description": "upload accounts JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Upload account iteme dump backup -- restores all finance accounts",
                "responses": {}
            }
        },
        "/finance/taxes/{owner}/{year}": {
            "get": {
                "description": "do taxes by the account Owner key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Do taxes by the account owner Owner key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "owner key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_finance.Tax"
                        }
                    }
                }
            }
        },
        "/finance/types": {
            "get": {
                "description": "list package model's field types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "List package model's field types",
                "responses": {}
            }
        },
        "/infra": {
            "get": {
                "description": "get all infrastructure details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Get whole infrastructure",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Infrastructure"
                        }
                    }
                }
            }
        },
        "/infra/domains": {
            "get": {
                "description": "get domain list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Get all domains",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Domain"
                        }
                    }
                }
            }
        },
        "/infra/domains/{key}": {
            "get": {
                "description": "get domain by :key param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Get domain by Key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Domain"
                        }
                    }
                }
            },
            "put": {
                "description": "update domain by its Key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Update domain by its Key",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Domain"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Domain"
                        }
                    }
                }
            },
            "post": {
                "description": "add new domain",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Add new domain",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Domain"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Domain"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete domain by its Key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Delete domain by its Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "domain ID/Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Domain"
                        }
                    }
                }
            }
        },
        "/infra/domains/{key}/deployment": {
            "post": {
                "description": "post domain deployment by key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Post domain deployment by key",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_infra.DNSRecord"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Domain"
                        }
                    }
                }
            }
        },
        "/infra/hosts": {
            "get": {
                "description": "get hosts list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Get all hosts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Host"
                        }
                    }
                }
            }
        },
        "/infra/hosts/{key}": {
            "get": {
                "description": "get host by :key param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Get host by Key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Host"
                        }
                    }
                }
            },
            "put": {
                "description": "update host by its Key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Update host by its Key",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Host"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Host"
                        }
                    }
                }
            },
            "post": {
                "description": "add new host",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Add new host",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Host"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Host"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete host by its Key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Delete host by its Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "host ID/Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Host"
                        }
                    }
                }
            }
        },
        "/infra/hosts/{key}/config": {
            "post": {
                "description": "update host's configuration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Upload current host configuration",
                "parameters": [
                    {
                        "description": "host's configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Configuration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Host"
                        }
                    }
                }
            }
        },
        "/infra/hosts/{key}/facts": {
            "post": {
                "description": "update host's facts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Upload current host facts",
                "parameters": [
                    {
                        "description": "host's facts",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Facts"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Host"
                        }
                    }
                }
            }
        },
        "/infra/hosts/{key}/vmic": {
            "post": {
                "description": "add/update a VM install configuration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Add/update a VM install configuration",
                "parameters": [
                    {
                        "description": "host's VMIC",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.VMInstallConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Host"
                        }
                    }
                }
            }
        },
        "/infra/hosts/{key}/vmic/{vm}": {
            "delete": {
                "description": "delete a VM install configuration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Delete a VM install configuration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Host"
                        }
                    }
                }
            }
        },
        "/infra/networks": {
            "get": {
                "description": "get networks list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Get all networks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Infrastructure"
                        }
                    }
                }
            }
        },
        "/infra/networks/{key}": {
            "get": {
                "description": "get network by :key param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Get network by Key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Network"
                        }
                    }
                }
            },
            "put": {
                "description": "update network by its Key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Update network by its Key",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Network"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Network"
                        }
                    }
                }
            },
            "post": {
                "description": "add new network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Add new network",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Network"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Network"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete network by its Key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Delete network by its Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "network ID/Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_infra.Network"
                        }
                    }
                }
            }
        },
        "/infra/restore": {
            "post": {
                "description": "restore infrastructure data model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Upload infrastructure JSON dump",
                "responses": {}
            }
        },
        "/infra/types": {
            "get": {
                "description": "list package model's field types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "List package model's field types",
                "responses": {}
            }
        },
        "/links": {
            "get": {
                "description": "get links complete list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "links"
                ],
                "summary": "Get all links",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_links.Link"
                        }
                    }
                }
            }
        },
        "/links/restore": {
            "post": {
                "description": "update links JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "links"
                ],
                "summary": "Upload links dump backup -- restore all links",
                "responses": {}
            }
        },
        "/links/types": {
            "get": {
                "description": "list package model's field types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "links"
                ],
                "summary": "List package model's field types",
                "responses": {}
            }
        },
        "/links/{key}": {
            "get": {
                "description": "get link by its :hash param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "links"
                ],
                "summary": "Get link by :hash",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_links.Link"
                        }
                    }
                }
            },
            "put": {
                "description": "update link by its Key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "links"
                ],
                "summary": "Update link by its Key",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_links.Link"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_links.Link"
                        }
                    }
                }
            },
            "post": {
                "description": "add new link to links array",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "links"
                ],
                "summary": "Add new link to links",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_links.Link"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_links.Link"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete link by its Key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "links"
                ],
                "summary": "Delete link by its Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "link Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_links.Link"
                        }
                    }
                }
            }
        },
        "/links/{key}/active": {
            "put": {
                "description": "toggle active boolean for {hash}",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "links"
                ],
                "summary": "Toggle active boolean for {hash}",
                "parameters": [
                    {
                        "type": "string",
                        "description": "hash",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_links.Link"
                        }
                    }
                }
            }
        },
        "/news/sources/": {
            "get": {
                "description": "get all news sources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "news"
                ],
                "summary": "Get news source list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_news.NewsSources"
                        }
                    }
                }
            }
        },
        "/news/sources/restore": {
            "post": {
                "description": "update news sources JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "news"
                ],
                "summary": "Upload news sources dump backup -- restores all sources",
                "responses": {}
            }
        },
        "/news/sources/{key}": {
            "get": {
                "description": "get news sources by their user :key param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "news"
                ],
                "summary": "Get news source list by User key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_news.Source"
                        }
                    }
                }
            },
            "put": {
                "description": "update news sources by user key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "news"
                ],
                "summary": "Update news sources by user key",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_news.Source"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_news.Source"
                        }
                    }
                }
            },
            "post": {
                "description": "add new news sources by user :key param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "news"
                ],
                "summary": "Add new user sources by user key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_news.Source"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete user sources by user key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "news"
                ],
                "summary": "Delete user sources by user key",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/news/types": {
            "get": {
                "description": "list package model's field types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "news"
                ],
                "summary": "List package model's field types",
                "responses": {}
            }
        },
        "/news/{key}": {
            "get": {
                "description": "fetch and parse news for :key param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "news"
                ],
                "summary": "Get news by user key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_news.Item"
                        }
                    }
                }
            }
        },
        "/projects": {
            "get": {
                "description": "get project list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get all projects",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_projects.Project"
                            }
                        }
                    }
                }
            }
        },
        "/projects/restore": {
            "post": {
                "description": "upload project JSON dump and restore the data model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Upload projects dump -- restore projects",
                "responses": {}
            }
        },
        "/projects/types": {
            "get": {
                "description": "list package model's field types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "List package model's field types",
                "responses": {}
            }
        },
        "/projects/{key}": {
            "get": {
                "description": "get project details by :id route param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get project by ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_projects.Project"
                        }
                    }
                }
            },
            "put": {
                "description": "update project by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Update project by its ID",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_projects.Project"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_projects.Project"
                        }
                    }
                }
            },
            "post": {
                "description": "add new project to projects list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Add new project",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_projects.Project"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_projects.Project"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete project by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Delete project by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_projects.Project"
                        }
                    }
                }
            }
        },
        "/queue/restore": {
            "post": {
                "description": "update tasks JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Upload tasks dump backup -- restore all tasks",
                "responses": {}
            }
        },
        "/queue/tasks": {
            "get": {
                "description": "get tasks complete list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Get all tasks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_queue.Task"
                        }
                    }
                }
            },
            "post": {
                "description": "add new task to queue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Add new task to queue",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/pkg_queue.Task"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/pkg_queue.Task"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/pkg_queue.Task"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/pkg_queue.Task"
                        }
                    }
                }
            }
        },
        "/queue/tasks/{key}": {
            "get": {
                "description": "get task by its key param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Get task by timestamp key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_queue.Task"
                        }
                    }
                }
            },
            "put": {
                "description": "update task by its Key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Update task by its Key",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_queue.Task"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_queue.Task"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete task by its Key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Delete task by its Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "task Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_queue.Task"
                        }
                    }
                }
            }
        },
        "/queue/tasks/{key}/processed": {
            "put": {
                "description": "toggle processed boolean by task's key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Toggle processed boolean by task's key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_queue.Task"
                        }
                    }
                }
            }
        },
        "/queue/types": {
            "get": {
                "description": "list package model's field types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "List package model's field types",
                "responses": {}
            }
        },
        "/roles": {
            "get": {
                "description": "get roules complete list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Get all roles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_roles.Role"
                            }
                        }
                    }
                }
            }
        },
        "/roles/restore": {
            "post": {
                "description": "update roles JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Upload roles dump backup -- restores all roles",
                "responses": {}
            }
        },
        "/roles/types": {
            "get": {
                "description": "list package model's field types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "List package model's field types",
                "responses": {}
            }
        },
        "/roles/{key}": {
            "get": {
                "description": "get role by :key param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Get role by Key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_roles.Role"
                        }
                    }
                }
            },
            "put": {
                "description": "update role by its Key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Update role by its Key",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_roles.Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_roles.Role"
                        }
                    }
                }
            },
            "post": {
                "description": "add new role to roles array",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Add new role to roles array",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_roles.Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_roles.Role"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete role by its Key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Delete role by its Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "role Key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_roles.Role"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "get users complete list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg_users.User"
                            }
                        }
                    }
                }
            }
        },
        "/users/restore": {
            "post": {
                "description": "update users JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Upload users dump backup -- restores all users",
                "responses": {}
            }
        },
        "/users/types": {
            "get": {
                "description": "list package model's field types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List package model's field types",
                "responses": {}
            }
        },
        "/users/{key}": {
            "get": {
                "description": "get user by their :key param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by Key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_users.User"
                        }
                    }
                }
            },
            "put": {
                "description": "update user by Key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user by Key",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_users.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_users.User"
                        }
                    }
                }
            },
            "post": {
                "description": "add new user to users array",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Add new user to users array",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg_users.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_users.User"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete user by Key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user by Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_users.User"
                        }
                    }
                }
            }
        },
        "/users/{key}/active": {
            "put": {
                "description": "toggle active boolean for {user}",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Toggle active boolean for {user}",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_users.User"
                        }
                    }
                }
            }
        },
        "/users/{key}/keys/ssh": {
            "get": {
                "description": "fetch :user ssh key array output in plain text",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get User's SSH keys in plain text",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_users.User"
                        }
                    }
                }
            },
            "post": {
                "description": "add new SSH keys to :user param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Add SSH public keys to User",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg_users.User"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "pkg_alvax.Channel": {
            "type": "object",
            "properties": {
                "baseUrl": {
                    "type": "string"
                },
                "botToken": {
                    "type": "string"
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pkg_alvax.Command"
                    }
                },
                "defaultGroupId": {
                    "type": "integer"
                },
                "githubGroupId": {
                    "type": "integer"
                },
                "integrate": {
                    "type": "boolean"
                },
                "memeMode": {
                    "type": "boolean"
                },
                "methods": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "prodWebhook": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "wehbookEndpoint": {
                    "type": "string"
                },
                "wehbookUrl": {
                    "type": "string"
                }
            }
        },
        "pkg_alvax.Command": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "pkg_alvax.ConfigRoot": {
            "type": "object",
            "properties": {
                "channels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/pkg_alvax.Channel"
                    }
                },
                "docker": {
                    "$ref": "#/definitions/pkg_alvax.Docker"
                },
                "key": {
                    "type": "string"
                },
                "ngrok": {
                    "$ref": "#/definitions/pkg_alvax.Ngrok"
                },
                "server": {
                    "$ref": "#/definitions/pkg_alvax.Server"
                }
            }
        },
        "pkg_alvax.Docker": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                }
            }
        },
        "pkg_alvax.Ngrok": {
            "type": "object",
            "properties": {
                "tunnelsUrl": {
                    "type": "string"
                }
            }
        },
        "pkg_alvax.Server": {
            "type": "object",
            "properties": {
                "port": {
                    "type": "integer"
                }
            }
        },
        "pkg_backups.Backup": {
            "type": "object",
            "required": [
                "service_name"
            ],
            "properties": {
                "active": {
                    "description": "Boolean indicating if the service is to be backuped.",
                    "type": "boolean"
                },
                "backup_size": {
                    "description": "Size of the gzip/tar archive.",
                    "type": "string"
                },
                "description": {
                    "description": "More verbose description of such service backup.",
                    "type": "string"
                },
                "executor_url": {
                    "description": "Dumping script, git URL.",
                    "type": "string"
                },
                "file_destination": {
                    "description": "Path to the file on destination machine.",
                    "type": "string"
                },
                "file_name": {
                    "description": "Name of the compressed backup file.",
                    "type": "string"
                },
                "last_status": {
                    "description": "Last status string of such backup (e.g. success, failure).",
                    "type": "string",
                    "default": "unknown"
                },
                "project_id": {
                    "description": "Reference to projects pkg's instance.",
                    "type": "string"
                },
                "service_name": {
                    "description": "Backuped service name -- unique identifier.",
                    "type": "string"
                },
                "timestamp": {
                    "description": "UNIX timestamp of the last provided backup.",
                    "type": "integer"
                }
            }
        },
        "pkg_business.Business": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "contact": {
                    "description": "Array of contacts of different type.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pkg_business.Contact"
                    }
                },
                "ico": {
                    "description": "Czech Company ICO/ID number.",
                    "type": "integer"
                },
                "id": {
                    "description": "Business' unique identifier.",
                    "type": "string"
                },
                "name_label": {
                    "description": "Company's business name.",
                    "type": "string"
                },
                "role": {
                    "description": "Business role to such organization (e.g. partner, owner)",
                    "type": "string"
                },
                "username": {
                    "description": "User's name linked to such business.",
                    "type": "string"
                },
                "vat_id": {
                    "description": "Czech company DICO/VAT ID number/string.",
                    "type": "string"
                }
            }
        },
        "pkg_business.Contact": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Contact field contents.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of contact field (e.g. e-mail address, street address, telephone number etc).",
                    "type": "string"
                }
            }
        },
        "pkg_depots.DepotItem": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "depot": {
                    "description": "Location name of such Item.",
                    "type": "string"
                },
                "desc": {
                    "description": "Item description, name, amount, type etc.",
                    "type": "string"
                },
                "id": {
                    "description": "Numeric unique ID of such Item.",
                    "type": "integer"
                },
                "misc": {
                    "description": "More information, e.g. the more precise location specification.",
                    "type": "string"
                },
                "owner_name": {
                    "description": "Owner name according to users package.",
                    "type": "string"
                }
            }
        },
        "pkg_dish.Incident": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "comment": {
                    "description": "Other commentary to the incident.",
                    "type": "string"
                },
                "desc": {
                    "description": "Further details about the incident like place, state of operation etc.",
                    "type": "string"
                },
                "end_date": {
                    "description": "Estimated end of incident handling/resolving.",
                    "type": "integer"
                },
                "id": {
                    "description": "Incident ID, stringified timestamp usually.",
                    "type": "string"
                },
                "name": {
                    "description": "Incident name.",
                    "type": "string"
                },
                "public": {
                    "description": "Public indicates the state of visibility for all.",
                    "type": "boolean"
                },
                "reason": {
                    "description": "Reason of the incident that happened.",
                    "type": "string"
                },
                "socket_id": {
                    "description": "ID of the referencing socket(s).\nSocketID []string `json:\"socket_id\"`",
                    "type": "string"
                },
                "start_date": {
                    "description": "The very start datetime of such incident.",
                    "type": "integer"
                },
                "type": {
                    "description": "Type of incident, e.g. planned, maintenance, outage etc",
                    "type": "string"
                }
            }
        },
        "pkg_dish.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "socket_list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "pkg_dish.Root": {
            "type": "object",
            "properties": {
                "incidents": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/pkg_dish.Incident"
                    }
                },
                "sockets": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/pkg_dish.Socket"
                    }
                }
            }
        },
        "pkg_dish.Socket": {
            "type": "object",
            "required": [
                "host_name",
                "port_tcp",
                "socket_id",
                "socket_name"
            ],
            "properties": {
                "dish_target": {
                    "description": "DishTarget is a string array, usually containing dish's host short name (e.g. frank).\nTo be referred as /dish/sockets/frank for example.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "expected_http_code_array": {
                    "description": "If the Host is HTTP/S endpoint, one can specify which HTTP Result/Response codes are okay and not to alert upon.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "fail_count": {
                    "description": "FailCount indicates how many times socket has to be in failed state before alerting.",
                    "type": "integer"
                },
                "healthy": {
                    "description": "Healthy boolean indicates wheter is socket okay, or the way around.",
                    "type": "boolean"
                },
                "host_name": {
                    "description": "Hostname (server.random.com) or HTTP/S URI (https://endpoint.space).",
                    "type": "string"
                },
                "maintenance": {
                    "description": "Maintenance boolean states for the M. mode being applied to such socket/endpoint.",
                    "type": "boolean"
                },
                "muted": {
                    "description": "Muted bool indicates that the socket is not propagated to any dish if true.",
                    "type": "boolean"
                },
                "muted_from": {
                    "description": "MutedFrom UNIX timestamp.",
                    "type": "integer"
                },
                "path_http": {
                    "description": "PathHTTP is any URL the site is about to be tested on, e.g. /dish/sockets",
                    "type": "string"
                },
                "port_tcp": {
                    "description": "Socket TCP port part\nEven default port 80 should be added here.",
                    "type": "integer"
                },
                "public": {
                    "description": "Public boolean tells the frontendee to show itself.",
                    "type": "boolean"
                },
                "response_time": {
                    "description": "ResponseTime is the time for the request to be processed.",
                    "type": "number"
                },
                "socket_description": {
                    "description": "More verbose name/description of the socket.",
                    "type": "string"
                },
                "socket_id": {
                    "description": "Socket ID, snake_cased for socket editing and deleting.",
                    "type": "string"
                },
                "socket_name": {
                    "description": "GEneric name of the socket, to be used in dish results as failed one endpoint for example.",
                    "type": "string"
                },
                "test_timestamp": {
                    "description": "TestTimestamp tells the time of the last socket testing being executed upon.",
                    "type": "integer"
                }
            }
        },
        "pkg_finance.Account": {
            "type": "object",
            "required": [
                "account_iban",
                "account_id",
                "account_number",
                "account_swift_bic"
            ],
            "properties": {
                "account_currency": {
                    "description": "Account currency name (e.g. CZK, GBP, EUR, USD)",
                    "type": "string"
                },
                "account_description": {
                    "description": "Account more verbose name.",
                    "type": "string"
                },
                "account_iban": {
                    "description": "Account IBAN code for international payments.",
                    "type": "string"
                },
                "account_id": {
                    "description": "Account unique ID, snake_cased identifier.",
                    "type": "string"
                },
                "account_number": {
                    "description": "Account number.",
                    "type": "string"
                },
                "account_owner": {
                    "description": "Owner's name/username to link account to.",
                    "type": "string"
                },
                "account_swift_bic": {
                    "description": "Account SWIFT/BIC code for international payments.",
                    "type": "string"
                },
                "bank_code": {
                    "description": "Universal in-state bank code (CZ mainly).\nBank codes such as \"0100\" would be invalid as type int!",
                    "type": "string"
                }
            }
        },
        "pkg_finance.Item": {
            "type": "object",
            "required": [
                "account_id",
                "amount",
                "currency",
                "id",
                "payment_date",
                "type"
            ],
            "properties": {
                "account_id": {
                    "description": "Referencing finance account.",
                    "type": "string"
                },
                "amount": {
                    "description": "Payment amount in defined currency (often the account's currency).",
                    "type": "number"
                },
                "business_id": {
                    "description": "BusinessID is a reference to 'business' package.",
                    "type": "string"
                },
                "currency": {
                    "description": "Payment currency name (e.g. CZK, GBP, EUR, USD).",
                    "type": "string"
                },
                "description": {
                    "description": "Payment/item description.",
                    "type": "string"
                },
                "id": {
                    "description": "Item unique ID (e.g. datetime timestamp plus currency etc).",
                    "type": "string"
                },
                "invoice_no": {
                    "description": "Invoice identification.",
                    "type": "string"
                },
                "misc": {
                    "description": "Mescellaneous information about the payment (e.g. foreign currency and amount).",
                    "type": "string"
                },
                "payment_date": {
                    "description": "PaymentDate is a datetime of the payment.",
                    "type": "string"
                },
                "tags": {
                    "description": "Tags to filter items.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "Type defines whether the item is an income, or an expense.",
                    "type": "string"
                }
            }
        },
        "pkg_finance.Tax": {
            "type": "object",
            "properties": {
                "base_sum": {
                    "description": "Difference between incomes and expenses. Base for income tax.",
                    "type": "number"
                },
                "expense_total": {
                    "description": "Sum of expenses.",
                    "type": "number"
                },
                "income_tax_estimation_60": {
                    "description": "Weighted estimation of the income tax, where 60% of income are meant as expenses.",
                    "type": "number"
                },
                "income_tax_estimation_abs": {
                    "description": "Absolute estimation of the income tax per year, from given totals.",
                    "type": "number"
                },
                "income_total": {
                    "description": "Sum of incomes.",
                    "type": "number"
                }
            }
        },
        "pkg_infra.Configuration": {
            "type": "object",
            "properties": {
                "ansible_host": {
                    "description": "ansible root vars",
                    "type": "string"
                },
                "ansible_user": {
                    "type": "string"
                },
                "asterisk_present": {
                    "type": "boolean"
                },
                "base_description": {
                    "type": "string"
                },
                "base_motd": {
                    "description": "base role\nhttps://www.patorjk.com/software/taag/#p=display\u0026f=ANSI%20Regular\u0026t=stokrle",
                    "type": "string"
                },
                "become": {
                    "type": "boolean"
                },
                "become_user": {
                    "type": "string"
                },
                "bind_exporter_present": {
                    "description": "metrics role",
                    "type": "boolean"
                },
                "dc": {
                    "type": "string"
                },
                "dialin_present": {
                    "description": "dialin-nas role",
                    "type": "boolean"
                },
                "disk1": {
                    "type": "string"
                },
                "disk2": {
                    "type": "string"
                },
                "disk3": {
                    "type": "string"
                },
                "disk4": {
                    "type": "string"
                },
                "dkim_selector": {
                    "type": "string"
                },
                "dns_master_ip": {
                    "type": "string"
                },
                "dns_server_present": {
                    "description": "dns role",
                    "type": "boolean"
                },
                "dns_server_type": {
                    "type": "string"
                },
                "dns_slave_ip": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "golang_version": {
                    "type": "string"
                },
                "grafana_container_name": {
                    "type": "string"
                },
                "grafana_docker_tag_version": {
                    "type": "string"
                },
                "grafana_docker_volume_name": {
                    "type": "string"
                },
                "grafana_present": {
                    "type": "boolean"
                },
                "grafana_webui_url": {
                    "type": "string"
                },
                "has_tls": {
                    "type": "boolean"
                },
                "install_k8s_control_node": {
                    "description": "container role",
                    "type": "boolean"
                },
                "install_k8s_worker_node": {
                    "type": "boolean"
                },
                "is_behind_cloudflare": {
                    "description": "proxy role",
                    "type": "boolean"
                },
                "is_cdn": {
                    "type": "boolean"
                },
                "is_edge_relay": {
                    "type": "boolean"
                },
                "is_hypervisor": {
                    "description": "hyp vars",
                    "type": "boolean"
                },
                "is_relay": {
                    "type": "boolean"
                },
                "is_wireguarded": {
                    "description": "net role",
                    "type": "boolean"
                },
                "kpu_present": {
                    "description": "kpu role",
                    "type": "boolean"
                },
                "loki_image_tag": {
                    "type": "string"
                },
                "loki_port": {
                    "type": "integer"
                },
                "loki_present": {
                    "type": "boolean"
                },
                "loki_url": {
                    "type": "string",
                    "default": "loki.savla.su"
                },
                "nameserver_primary": {
                    "type": "string"
                },
                "nameserver_secondary": {
                    "type": "string"
                },
                "nginx_present": {
                    "type": "boolean"
                },
                "postfix_exporter_present": {
                    "type": "boolean"
                },
                "postfix_myhostname": {
                    "description": "postfix role",
                    "type": "string"
                },
                "postfix_smtpd_banner": {
                    "type": "string"
                },
                "private_cidr": {
                    "type": "integer"
                },
                "private_gateway": {
                    "type": "string"
                },
                "private_ip": {
                    "type": "string"
                },
                "private_netmask": {
                    "type": "string"
                },
                "private_network": {
                    "type": "string"
                },
                "prometheus_config_dir": {
                    "type": "string"
                },
                "prometheus_container_name": {
                    "type": "string"
                },
                "prometheus_docker_volume_name": {
                    "type": "string"
                },
                "prometheus_image_tag": {
                    "type": "string"
                },
                "prometheus_present": {
                    "type": "boolean"
                },
                "prometheus_webui_url": {
                    "type": "string"
                },
                "promtail_present": {
                    "type": "boolean"
                },
                "public_ip": {
                    "type": "string"
                },
                "raid": {
                    "type": "boolean"
                },
                "remote_host_ip_address": {
                    "description": "backup role",
                    "type": "string",
                    "default": "10.4.5.130"
                },
                "runner_action": {
                    "type": "string"
                },
                "runner_config_labels": {
                    "type": "string"
                },
                "runner_config_name": {
                    "type": "string"
                },
                "runner_config_token": {
                    "type": "string"
                },
                "runner_group": {
                    "type": "string"
                },
                "runner_present": {
                    "description": "ghar role",
                    "type": "boolean"
                },
                "runner_user": {
                    "type": "string"
                },
                "runner_version": {
                    "type": "string"
                },
                "setup_ipsec": {
                    "type": "boolean"
                },
                "traefik_docker_container_name": {
                    "type": "string"
                },
                "traefik_docker_network_name": {
                    "type": "string"
                },
                "traefik_docker_tag_version": {
                    "type": "string"
                },
                "traefik_present": {
                    "type": "boolean"
                },
                "traefik_webui_external_port": {
                    "type": "integer"
                },
                "traefik_webui_url": {
                    "type": "string"
                },
                "use_geoip": {
                    "type": "boolean"
                }
            }
        },
        "pkg_infra.DNSRecord": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "proxied": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ttl": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "pkg_infra.Domain": {
            "type": "object",
            "required": [
                "domain_id"
            ],
            "properties": {
                "cf_zone_id": {
                    "description": "Cloudflare Zone ID",
                    "type": "string"
                },
                "domain_fqdn": {
                    "description": "Fully qualified domain name.",
                    "type": "string"
                },
                "domain_id": {
                    "description": "Unique domain identifier.",
                    "type": "string"
                },
                "domain_owner": {
                    "description": "Domain's owner (user)name.",
                    "type": "string"
                },
                "expiration_date": {
                    "description": "Domain's expiration date",
                    "type": "string"
                },
                "private_details": {
                    "description": "Private details (e.g. addresses, phone number etc in WHOIS)",
                    "type": "boolean"
                },
                "registrar_name": {
                    "description": "Name of the current registrar",
                    "type": "string"
                }
            }
        },
        "pkg_infra.Facts": {
            "type": "object",
            "properties": {
                "is_virtual": {
                    "type": "boolean"
                },
                "kernel_version": {
                    "type": "string"
                },
                "memory_total_bytes": {
                    "type": "integer"
                },
                "memory_used_bytes": {
                    "type": "integer"
                },
                "net_domain": {
                    "type": "string"
                },
                "net_fqdn": {
                    "type": "string"
                },
                "net_hostname": {
                    "type": "string"
                },
                "net_primary_ip": {
                    "type": "string"
                },
                "net_primary_network": {
                    "type": "string"
                },
                "os_arch": {
                    "type": "string"
                },
                "os_family": {
                    "type": "string"
                },
                "os_selinux_enabled": {
                    "type": "boolean"
                },
                "proc_count": {
                    "type": "integer"
                },
                "system_uptime_sec": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                }
            }
        },
        "pkg_infra.Host": {
            "type": "object",
            "required": [
                "hostname_fqdn",
                "hostname_short",
                "id"
            ],
            "properties": {
                "children": {
                    "description": "Children of such machine -- should use machines' hashes for proper linking.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "children_configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pkg_infra.VMInstallConfig"
                    }
                },
                "configuration": {
                    "description": "Configuration system variables.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/pkg_infra.Configuration"
                        }
                    ]
                },
                "datacentre": {
                    "description": "Datacentre is the physical locality of such machine.",
                    "type": "string"
                },
                "description": {
                    "description": "Brief node's description -- shown in node's MOTD on remote login.",
                    "type": "string"
                },
                "domain": {
                    "description": "Host's default domain name (e.g. savla.su as internal domain name).",
                    "type": "string"
                },
                "expires_at": {
                    "description": "EpiresAt is a time of the expiration of such hosting service.",
                    "type": "string"
                },
                "facts": {
                    "description": "Exported system facts from facter.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/pkg_infra.Facts"
                        }
                    ]
                },
                "hostname_fqdn": {
                    "description": "Node hostname as FQDN-formatted.",
                    "type": "string"
                },
                "hostname_short": {
                    "description": "Node hostname without its domain.",
                    "type": "string"
                },
                "id": {
                    "description": "Unique hash/ID to link to such host record.",
                    "type": "string"
                },
                "ip_address": {
                    "description": "Important network-related IP addresses to be assigned to such host (e.g. public interface address, wireguard interface address etc).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "provider": {
                    "description": "Provider is the name of the hosting company of such machine.",
                    "type": "string"
                },
                "roles": {
                    "description": "Ansible roles to be applied to such host.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wireguarded": {
                    "description": "Wireguarded bool indicates that the host is part of the core network.",
                    "type": "boolean"
                }
            }
        },
        "pkg_infra.Infrastructure": {
            "type": "object",
            "properties": {
                "domains": {
                    "description": "Domains linked to such infrastructure.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pkg_infra.Domain"
                    }
                },
                "hosts": {
                    "description": "Hosts/nodes linked to such infrastructure.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pkg_infra.Host"
                    }
                },
                "networks": {
                    "description": "Networks linked to such infrastructure.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pkg_infra.Network"
                    }
                }
            }
        },
        "pkg_infra.Network": {
            "type": "object",
            "required": [
                "hash"
            ],
            "properties": {
                "hash": {
                    "description": "Unique network's identifier",
                    "type": "string"
                },
                "interface": {
                    "description": "Interface(s) of such network.",
                    "type": "string"
                },
                "network_address": {
                    "description": "Network IP address.",
                    "type": "string"
                },
                "network_cidr_block": {
                    "description": "CIDR block of netmask.",
                    "type": "string"
                },
                "network_name": {
                    "description": "Network name, verbose ID.",
                    "type": "string"
                }
            }
        },
        "pkg_infra.VMInstallConfig": {
            "type": "object",
            "properties": {
                "autostart": {
                    "type": "boolean"
                },
                "baseos_repo": {
                    "type": "string"
                },
                "bridge_name": {
                    "type": "string"
                },
                "console_alias": {
                    "type": "string",
                    "default": "serial0"
                },
                "console_type": {
                    "type": "string",
                    "default": "pty"
                },
                "disk_alias": {
                    "type": "string"
                },
                "disk_bus": {
                    "type": "string",
                    "default": "virtio"
                },
                "disk_source": {
                    "type": "string"
                },
                "disk_type": {
                    "type": "string",
                    "default": "raw"
                },
                "hostname_fqdn": {
                    "type": "string"
                },
                "ipv4_address": {
                    "type": "string"
                },
                "ipv4_dns": {
                    "type": "string"
                },
                "ipv4_gateway": {
                    "type": "string"
                },
                "ipv4_netmask": {
                    "type": "string"
                },
                "lock_root": {
                    "type": "boolean"
                },
                "locname": {
                    "type": "string"
                },
                "memory_size": {
                    "type": "integer"
                },
                "memory_unit": {
                    "type": "string",
                    "default": "MB"
                },
                "name": {
                    "type": "string"
                },
                "network_name": {
                    "type": "string"
                },
                "os_type": {
                    "type": "string",
                    "default": "linux"
                },
                "os_veriant": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "default": "absent"
                },
                "timezone": {
                    "type": "string",
                    "default": "Europe/Vienna"
                },
                "vcpu_count": {
                    "type": "integer"
                },
                "virt_type": {
                    "type": "string",
                    "default": "kvm"
                },
                "xml_filename": {
                    "type": "string"
                }
            }
        },
        "pkg_links.Link": {
            "type": "object",
            "required": [
                "name",
                "url"
            ],
            "properties": {
                "active": {
                    "description": "Link's activated status.",
                    "type": "boolean"
                },
                "description": {
                    "description": "Link's more verbose name/description.",
                    "type": "string"
                },
                "name": {
                    "description": "Link's name/placeholder, used as an unique key.",
                    "type": "string"
                },
                "url": {
                    "description": "Link's URL to link to.",
                    "type": "string"
                }
            }
        },
        "pkg_news.Item": {
            "type": "object",
            "properties": {
                "link": {
                    "description": "Link to such item -- to the actual article usually.",
                    "type": "string"
                },
                "parse_date_rfc1123z": {
                    "description": "Special date of issue format to reparse/order all news items altogether.",
                    "type": "string"
                },
                "perex": {
                    "description": "Item's short description (perex).",
                    "type": "string"
                },
                "pub_date": {
                    "description": "Date of issue, formatted by issuer.",
                    "type": "string"
                },
                "server": {
                    "description": "Issuer server name (hostname with subdomain).",
                    "type": "string"
                },
                "title": {
                    "description": "Item's title (headline).",
                    "type": "string"
                }
            }
        },
        "pkg_news.NewsSources": {
            "type": "object",
            "properties": {
                "user_sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pkg_news.UserSource"
                    }
                }
            }
        },
        "pkg_news.Source": {
            "type": "object",
            "properties": {
                "source_id": {
                    "description": "Source unique identificator.",
                    "type": "string"
                },
                "source_name": {
                    "description": "Source's more natural name.",
                    "type": "string"
                },
                "source_url": {
                    "description": "RSS URL to the source.",
                    "type": "string"
                }
            }
        },
        "pkg_news.UserSource": {
            "type": "object",
            "properties": {
                "news_sources": {
                    "description": "Actual user's news sources.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pkg_news.Source"
                    }
                },
                "user_name": {
                    "description": "News sources linked username.",
                    "type": "string"
                }
            }
        },
        "pkg_projects.Project": {
            "type": "object",
            "required": [
                "project_id",
                "project_name"
            ],
            "properties": {
                "backuped": {
                    "description": "Projects backuped boolean.",
                    "type": "boolean"
                },
                "kanban_link": {
                    "description": "URL to kanboard/kanban project's page.",
                    "type": "string"
                },
                "project_deploy_target": {
                    "description": "Target internal node of deployment.",
                    "type": "string"
                },
                "project_desc": {
                    "description": "Brief project description.",
                    "type": "string"
                },
                "project_docs_link": {
                    "description": "URL to documentation page(s).",
                    "type": "string"
                },
                "project_id": {
                    "description": "Project's unique identificator.",
                    "type": "string"
                },
                "project_manager": {
                    "description": "Project manager's name/username.",
                    "type": "string"
                },
                "project_name": {
                    "description": "Project name.",
                    "type": "string"
                },
                "project_published": {
                    "description": "Published boolean.",
                    "type": "boolean"
                },
                "project_repo": {
                    "description": "Git repository link (not URL, without HTTP scheme).",
                    "type": "string"
                },
                "project_url": {
                    "description": "URL to base page of the project (project's URL).",
                    "type": "string"
                },
                "redmine_link": {
                    "description": "URL to redmine project overview.",
                    "type": "string"
                }
            }
        },
        "pkg_queue.Task": {
            "type": "object",
            "required": [
                "worker_name"
            ],
            "properties": {
                "description": {
                    "description": "Description of such task in human-readable format.",
                    "type": "string"
                },
                "last_change_timestamp": {
                    "description": "Timestamp of the last activity made on this task.",
                    "type": "string"
                },
                "name": {
                    "description": "Taks's ID as an unique identifier in the queue.",
                    "type": "string"
                },
                "processed": {
                    "description": "Processed is an indicator that such task is being worked on.",
                    "type": "boolean"
                },
                "state": {
                    "description": "State is a human-readable string describing the actual state of the task.",
                    "type": "string"
                },
                "worker_name": {
                    "description": "An identifier of a worker for the task to be executed with.",
                    "type": "string"
                }
            }
        },
        "pkg_roles.Role": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "active": {
                    "description": "Role status, by default it is inactive.",
                    "type": "boolean"
                },
                "administrator": {
                    "description": "Basic Access-Control List field.",
                    "type": "boolean"
                },
                "description": {
                    "description": "Role description to make more sense when listing those.",
                    "type": "string"
                },
                "name": {
                    "description": "Role name is its unique description, acts like an ID too.",
                    "type": "string"
                }
            }
        },
        "pkg_users.User": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "ACL": {
                    "description": "Access Control List. List of swapi modules to be accessed.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "active": {
                    "description": "Presence/Absence boolean. If false, one is not allowed to log-in (token is rejected),\nto interract with savla-dev infra in general (by default).",
                    "type": "boolean"
                },
                "country": {
                    "description": "Country of origin -- to help maintain global contacts.",
                    "type": "string"
                },
                "discord_username": {
                    "description": "Discord account/profile name.",
                    "type": "string"
                },
                "email_alias": {
                    "description": "Email alias in cloudflare email routing",
                    "type": "string"
                },
                "email_main": {
                    "description": "Email address main, personal",
                    "type": "string"
                },
                "full_name": {
                    "description": "Full Name of such user.",
                    "type": "string"
                },
                "gdpr_consent": {
                    "description": "Important GDPR consent boolean -- if false, user's details should be omitted!\nSEE more -- https://gdpr.eu/checklist/",
                    "type": "boolean"
                },
                "github_username": {
                    "description": "GitHub account/profile name (used for SSH public keys importing).",
                    "type": "string"
                },
                "gpg_keys": {
                    "description": "User's GPG public keys array.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "ID not used anymore as indexing is used differently now (searching by Name, index respects array implicit property).",
                    "type": "string"
                },
                "roles": {
                    "description": "User's given roles -- a role labels array.\nRoles []roles.Role `json:\"roles\"`",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "spotify_link": {
                    "description": "Spotify link to one's profile.",
                    "type": "string"
                },
                "ssh_keys": {
                    "description": "User's SSH public keys array.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "token_hmac": {
                    "description": "Unique token used for auth purposes, SHA512 preferred.",
                    "type": "string"
                },
                "wireguard_vpn": {
                    "description": "All Wireguard config objects -- an array.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pkg_users.Wireguard"
                    }
                }
            }
        },
        "pkg_users.Wireguard": {
            "type": "object",
            "properties": {
                "allowed_ips": {
                    "description": "Allowed IP address(es) list on the side of server (vpn_gateway_server).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "device_name": {
                    "description": "Unique device name (for such user).",
                    "type": "string"
                },
                "ip_address": {
                    "description": "User's private IP address.",
                    "type": "string"
                },
                "permission": {
                    "description": "Is the user given permission to dial a connection?",
                    "type": "boolean"
                },
                "private_key": {
                    "description": "Wireguard private key.\nTODO: should be encrypted?",
                    "type": "string"
                },
                "public_key": {
                    "description": "Wireguard public key.",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "apiKey": {
            "type": "apiKey",
            "name": "X-Auth-Token",
            "in": "header"
        }
    }
}