{
    "swagger": "2.0",
    "info": {
        "description": "sakalWeb Information System v5 RESTful API documentation",
        "title": "swis-api v5",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://savla.dev/swapi",
            "email": "info@savla.dev"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/savla-dev/swis-api/blob/master/LICENSE"
        },
        "version": "5.2"
    },
    "host": "swapi.savla.su:8049",
    "basePath": "/",
    "paths": {
        "/alvax/commands": {
            "get": {
                "description": "get command array for alvax",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alvax"
                ],
                "summary": "Get all alvax's commands",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/alvax.AlvaxCommands"
                        }
                    }
                }
            }
        },
        "/alvax/commands/restore": {
            "post": {
                "description": "update alvax JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alvax"
                ],
                "summary": "Upload alvax dump backup -- restores all loaded commands",
                "responses": {}
            }
        },
        "/backups": {
            "get": {
                "description": "get backups actual status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Get all backups status",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/backups/restore": {
            "post": {
                "description": "upload backups JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Upload backups dump backup -- restores all backup services",
                "responses": {}
            }
        },
        "/backups/status/{service}": {
            "get": {
                "description": "get backup status by project/service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Get backup status by project/service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dish instance name",
                        "name": "host",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/backups/{service}": {
            "put": {
                "description": "update backup status by service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Update backup status by service",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/backups.Backup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/backups.Backup"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete backup service by its Name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Delete backup service by its Name",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/backups/{service}/active": {
            "put": {
                "description": "active/inactive backup toggle by its ServiceName",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backups"
                ],
                "summary": "Acitive/inactive backup toggle by its ServiceName",
                "parameters": [
                    {
                        "type": "string",
                        "description": "service name",
                        "name": "service_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/backups.Backup"
                        }
                    }
                }
            }
        },
        "/business": {
            "get": {
                "description": "get business complete list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business"
                ],
                "summary": "Get all businesses",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/business.BusinessArray"
                        }
                    }
                }
            },
            "post": {
                "description": "add new business",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business"
                ],
                "summary": "Add new business to the array",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/business.Business"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/business.Business"
                        }
                    }
                }
            }
        },
        "/business/restore": {
            "post": {
                "description": "upload business JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business"
                ],
                "summary": "Upload business dump backup -- restores all businesses",
                "responses": {}
            }
        },
        "/business/{ico}": {
            "get": {
                "description": "get business by :ico param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "business"
                ],
                "summary": "Get business by its ICO (ID)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/business.Business"
                        }
                    }
                }
            }
        },
        "/depots": {
            "get": {
                "description": "get depot complete list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "depot"
                ],
                "summary": "Get all depots and their users/owners",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/depot.Depots"
                        }
                    }
                }
            }
        },
        "/depots/restore": {
            "post": {
                "description": "upload depot JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "depot"
                ],
                "summary": "Upload depot dump backup -- restores all depots",
                "responses": {}
            }
        },
        "/depots/{owner}": {
            "get": {
                "description": "get depot list by :owner param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "depot"
                ],
                "summary": "Get depot list by Owner",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/depot.Depot"
                        }
                    }
                }
            }
        },
        "/dish/restore": {
            "post": {
                "description": "update dish JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Upload dish dump backup -- restores all loaded sockets",
                "responses": {}
            }
        },
        "/dish/sockets": {
            "get": {
                "description": "get socket list, socket array",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Get all sockets list",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/dish/sockets/{host}": {
            "get": {
                "description": "get socket list by Host",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Get socket list by host",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dish instance name",
                        "name": "host",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/dish/sockets/{id}": {
            "put": {
                "description": "update socket by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Update socket by its ID",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dish.Socket"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dish.Socket"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete socket by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Delete socket by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dish ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dish.Socket"
                        }
                    }
                }
            }
        },
        "/dish/sockets/{id}/mute": {
            "put": {
                "description": "mute/unmute socket by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dish"
                ],
                "summary": "Mute/unmute socket by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dish ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dish.Socket"
                        }
                    }
                }
            }
        },
        "/dish/test": {
            "head": {
                "tags": [
                    "dish"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/finance": {
            "get": {
                "description": "get finance complete list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Get all finance accounts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/finance.Finance"
                        }
                    }
                }
            }
        },
        "/finance/accounts/{owner}": {
            "get": {
                "description": "get finance account by :owner param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Get finance account by its Owner",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/finance.Account"
                        }
                    }
                }
            }
        },
        "/finance/restore": {
            "post": {
                "description": "upload accounts JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "finance"
                ],
                "summary": "Upload finance accounts dump backup -- restores all finance accounts",
                "responses": {}
            }
        },
        "/infra": {
            "get": {
                "description": "get all infrastructure details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Get whole infrastructure",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.Infrastructure"
                        }
                    }
                }
            }
        },
        "/infra/hosts": {
            "get": {
                "description": "get hosts list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Get all hosts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.Hosts"
                        }
                    }
                }
            }
        },
        "/infra/hosts/{hostname}": {
            "get": {
                "description": "get host by :hostname param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Get host by Hostname",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.Host"
                        }
                    }
                }
            }
        },
        "/infra/networks": {
            "get": {
                "description": "get networks list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Get all networks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.Infrastructure"
                        }
                    }
                }
            }
        },
        "/infra/restore": {
            "post": {
                "description": "restore infrastructure data model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "infra"
                ],
                "summary": "Upload infrastructure JSON dump",
                "responses": {}
            }
        },
        "/news/sources/": {
            "get": {
                "description": "get all news sources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "news"
                ],
                "summary": "Get news source list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/news.News"
                        }
                    }
                }
            }
        },
        "/news/sources/restore": {
            "post": {
                "description": "update news sources JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "news"
                ],
                "summary": "Upload news sources dump backup -- restores all sources",
                "responses": {}
            }
        },
        "/news/sources/{name}": {
            "get": {
                "description": "get news sources by their :name param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "news"
                ],
                "summary": "Get news source list by Username",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/news.News"
                        }
                    }
                }
            }
        },
        "/news/{name}": {
            "get": {
                "description": "fetch and parse news for :user param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "news"
                ],
                "summary": "Get news by User",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/news.Item"
                        }
                    }
                }
            }
        },
        "/projects": {
            "post": {
                "description": "add new project to projects list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Add new project",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/projects.Project"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/projects.Project"
                        }
                    }
                }
            }
        },
        "/projects/restore": {
            "post": {
                "description": "upload project JSON dump and restore the data model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Upload projects dump -- restore projects",
                "responses": {}
            }
        },
        "/projects/{id}": {
            "get": {
                "description": "get project details by :id param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get project by ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/projects.Project"
                        }
                    }
                }
            }
        },
        "/projects/{name}": {
            "get": {
                "description": "get project list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get all projects",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/projects.Projects"
                        }
                    }
                }
            }
        },
        "/role/{name}": {
            "get": {
                "description": "get role by :id param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Get role by Name",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/roles.Role"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "description": "get roules complete list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Get all roles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/roles.Roles"
                        }
                    }
                }
            },
            "post": {
                "description": "add new role to roles array",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Add new role to roles array",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/roles.Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/roles.Role"
                        }
                    }
                }
            }
        },
        "/roles/restore": {
            "post": {
                "description": "update roles JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Upload roles dump backup -- restores all roles",
                "responses": {}
            }
        },
        "/swife": {
            "get": {
                "description": "get frontends complete list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "swife"
                ],
                "summary": "Get all fronteds",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swife.Frontend"
                        }
                    }
                }
            }
        },
        "/swife/restore": {
            "post": {
                "description": "upload frontend JSON dump and restore the data model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "swife"
                ],
                "summary": "Uploadswife dump backup -- restores all frontends",
                "responses": {}
            }
        },
        "/swife/{sitename}": {
            "get": {
                "description": "get frontend details by :sitename param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "swife"
                ],
                "summary": "Get frontend by Sitename",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swife.Frontend"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "get users complete list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.Users"
                        }
                    }
                }
            },
            "post": {
                "description": "add new user to users array",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Add new user to users array",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.User"
                        }
                    }
                }
            }
        },
        "/users/restore": {
            "post": {
                "description": "update users JSON dump",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Upload users dump backup -- restores all users",
                "responses": {}
            }
        },
        "/users/{name}": {
            "get": {
                "description": "get user by their :name param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by Name",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.User"
                        }
                    }
                }
            }
        },
        "/users/{name}/active": {
            "put": {
                "description": "toggle active boolean for {user}",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Toggle active boolean for {user}",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.User"
                        }
                    }
                }
            }
        },
        "/users/{name}/keys/ssh": {
            "get": {
                "description": "fetch :user ssh key array output in plain text",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get User's SSH keys in plain text",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.User"
                        }
                    }
                }
            },
            "post": {
                "description": "add new SSH keys to :user param",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Add SSH public keys to User",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.User"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "alvax.AlvaxCommands": {
            "type": "object",
            "properties": {
                "command_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/alvax.Command"
                    }
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "alvax.Command": {
            "type": "object",
            "properties": {
                "alias_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "argument_list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "name as in the '/name' Telegram command syntax",
                    "type": "string"
                },
                "parent_class": {
                    "type": "string"
                },
                "required_argument": {
                    "type": "boolean"
                }
            }
        },
        "backups.Backup": {
            "type": "object",
            "required": [
                "service_name"
            ],
            "properties": {
                "active": {
                    "description": "Boolean indicating if the service is to be backuped.",
                    "type": "boolean"
                },
                "backup_size": {
                    "description": "Size of the gzip/tar archive.",
                    "type": "string"
                },
                "description": {
                    "description": "More verbose description of such service backup.",
                    "type": "string"
                },
                "executor_url": {
                    "description": "Dumping script, git URL.",
                    "type": "string"
                },
                "file_name": {
                    "description": "Name of the compressed backup file.",
                    "type": "string"
                },
                "last_status": {
                    "description": "Last status string of such backup (e.g. success, failure).",
                    "type": "string",
                    "default": "unknown"
                },
                "service_name": {
                    "description": "Backuped service name -- unique identifier.",
                    "type": "string"
                },
                "timestamp": {
                    "description": "UNIX timestamp of the last provided backup.",
                    "type": "integer"
                }
            }
        },
        "business.Business": {
            "type": "object",
            "properties": {
                "contact": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/business.Contact"
                    }
                },
                "ico": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name_label": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "vat_id": {
                    "type": "string"
                }
            }
        },
        "business.BusinessArray": {
            "type": "object",
            "properties": {
                "business": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/business.Business"
                    }
                }
            }
        },
        "business.Contact": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "depot.Depot": {
            "type": "object",
            "properties": {
                "depot_items": {
                    "description": "Generic array of depot Items.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/depot.Item"
                    }
                },
                "owner_name": {
                    "description": "Depot owner's name.",
                    "type": "string"
                }
            }
        },
        "depot.Depots": {
            "type": "object",
            "properties": {
                "depots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/depot.Depot"
                    }
                }
            }
        },
        "depot.Item": {
            "type": "object",
            "properties": {
                "depot": {
                    "description": "Location name of such Item.",
                    "type": "string"
                },
                "desc": {
                    "description": "Item descripton, name, ammount, type etc.",
                    "type": "string"
                },
                "id": {
                    "description": "Numeric unique ID of such Item.",
                    "type": "integer"
                },
                "misc": {
                    "description": "More information, e.g. the more precise location specification.",
                    "type": "string"
                }
            }
        },
        "dish.Socket": {
            "type": "object",
            "required": [
                "host_name",
                "port_tcp",
                "socket_id"
            ],
            "properties": {
                "dish_target": {
                    "description": "DishTarget is a string array, usually containing dish's host short name (e.g. frank)\nto be refered e.g. /dish/sockets/frank",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "expected_http_code_array": {
                    "description": "If the Host is HTTP/S endpoint, one can specify which HTTP Result/Response codes are okay and not to alert upon",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "host_name": {
                    "description": "Hostname (server.random.com) or HTTP/S URI (http://endpoint.space)",
                    "type": "string"
                },
                "muted": {
                    "description": "Muted bool indicates that the socket is not propagated to any dish",
                    "type": "boolean"
                },
                "path_http": {
                    "description": "PathHTTP is any URL the site is about to be tested on, e.g. /dish/sockets",
                    "type": "string"
                },
                "port_tcp": {
                    "description": "Socket TCP port part\nEven default port 80 should be added here",
                    "type": "integer"
                },
                "socket_description": {
                    "description": "More verbose name/description of the socket",
                    "type": "string"
                },
                "socket_id": {
                    "description": "Socket ID, snake_cased for socket editing and deleting",
                    "type": "string"
                },
                "socket_name": {
                    "description": "GEneric name of the socket, to be used in dish results as failed one endpoint for example",
                    "type": "string"
                }
            }
        },
        "finance.Account": {
            "type": "object",
            "properties": {
                "account_currency": {
                    "type": "string"
                },
                "account_iban": {
                    "type": "string"
                },
                "account_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/finance.Item"
                    }
                },
                "account_name": {
                    "type": "string"
                },
                "account_number": {
                    "type": "string"
                },
                "account_owner": {
                    "type": "string"
                },
                "account_swift_bic": {
                    "type": "string"
                },
                "bank_code": {
                    "description": "bank codes like \"0100\" would be invalid as type int",
                    "type": "string"
                }
            }
        },
        "finance.Finance": {
            "type": "object",
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/finance.Account"
                    }
                }
            }
        },
        "finance.Item": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "billing_date": {
                    "type": "string"
                },
                "currency_code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "misc": {
                    "type": "string"
                }
            }
        },
        "infra.Domain": {
            "type": "object",
            "properties": {
                "domain_fqdn": {
                    "description": "Fully qualified domain name.",
                    "type": "string"
                },
                "domain_id": {
                    "description": "Unique domain identifier.",
                    "type": "string"
                },
                "domain_owner": {
                    "description": "Domain's owner (user)name.",
                    "type": "string"
                }
            }
        },
        "infra.Host": {
            "type": "object",
            "required": [
                "hostname_fqdn",
                "hostname_short",
                "id"
            ],
            "properties": {
                "children": {
                    "description": "Children of such machine -- should use machines' hashes for proper linking.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "description": "Brief node's description -- shown in node's MOTD on remote login.",
                    "type": "string"
                },
                "domain": {
                    "description": "Host's default domain name (e.g. savla.su as internal domain name).",
                    "type": "string"
                },
                "hostname_fqdn": {
                    "description": "Node hostname as FQDN-formatted.",
                    "type": "string"
                },
                "hostname_short": {
                    "description": "Node hostname without its domain.",
                    "type": "string"
                },
                "id": {
                    "description": "Unique hash/ID to link to such host record.",
                    "type": "string"
                },
                "ip_address": {
                    "description": "Important network-related IP addresses to be assigned to such host (e.g. public interface address, wireguard interface address etc).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "roles": {
                    "description": "Ansible roles to be applied to such host.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "infra.Hosts": {
            "type": "object",
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infra.Host"
                    }
                }
            }
        },
        "infra.Infrastructure": {
            "type": "object",
            "properties": {
                "domains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infra.Domain"
                    }
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infra.Host"
                    }
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infra.Network"
                    }
                }
            }
        },
        "infra.Network": {
            "type": "object",
            "properties": {
                "hash": {
                    "description": "Unique network's identifier",
                    "type": "string"
                },
                "interface": {
                    "description": "Interface(s) of such network.",
                    "type": "string"
                },
                "network_address": {
                    "description": "Netowrk IP address.",
                    "type": "string"
                },
                "network_cidr_block": {
                    "description": "CIDR block of netmask.",
                    "type": "string"
                },
                "network_name": {
                    "description": "Network name, verbose ID.",
                    "type": "string"
                }
            }
        },
        "news.Item": {
            "type": "object",
            "properties": {
                "link": {
                    "type": "string"
                },
                "parse_date_rfc1123z": {
                    "type": "string"
                },
                "perex": {
                    "type": "string"
                },
                "pub_date": {
                    "type": "string"
                },
                "server": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "news.News": {
            "type": "object",
            "properties": {
                "news_sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/news.Source"
                    }
                },
                "news_user": {
                    "type": "string"
                }
            }
        },
        "news.Source": {
            "type": "object",
            "properties": {
                "source_id": {
                    "type": "string"
                },
                "source_name": {
                    "type": "string"
                },
                "source_url": {
                    "type": "string"
                }
            }
        },
        "projects.Project": {
            "type": "object",
            "required": [
                "project_id"
            ],
            "properties": {
                "backuped": {
                    "description": "Projects backuped boolean.",
                    "type": "boolean"
                },
                "kanban_link": {
                    "description": "URL to kanboard/kanban project's page.",
                    "type": "string"
                },
                "project_deploy_target": {
                    "description": "Target internal node of deployment.",
                    "type": "string"
                },
                "project_desc": {
                    "description": "Brief project description.",
                    "type": "string"
                },
                "project_docs_link": {
                    "description": "URL to documentation page(s).",
                    "type": "string"
                },
                "project_id": {
                    "description": "Project's unique identificator.",
                    "type": "string"
                },
                "project_manager": {
                    "description": "Project manager's name/username.",
                    "type": "string"
                },
                "project_name": {
                    "description": "Project name.",
                    "type": "string"
                },
                "project_published": {
                    "description": "Published boolean.",
                    "type": "boolean"
                },
                "project_repo": {
                    "description": "Git repository link (not URL, without HTTP scheme).",
                    "type": "string"
                },
                "project_url": {
                    "description": "URL to base page of the project (project's URL).",
                    "type": "string"
                },
                "redmine_link": {
                    "description": "URL to redmine project overview.",
                    "type": "string"
                }
            }
        },
        "projects.Projects": {
            "type": "object",
            "properties": {
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/projects.Project"
                    }
                }
            }
        },
        "roles.Role": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Role status, by default it is inactive.",
                    "type": "boolean"
                },
                "description": {
                    "description": "Role description to make more sense when listing those.",
                    "type": "string"
                },
                "name": {
                    "description": "Role name is its unique description, acts like an ID too.",
                    "type": "string"
                }
            }
        },
        "roles.Roles": {
            "type": "object",
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/roles.Role"
                    }
                }
            }
        },
        "swife.Frontend": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Site's description, possible on the frontpage.",
                    "type": "string"
                },
                "site_name": {
                    "description": "SiteName or hostname to get details for.",
                    "type": "string"
                },
                "title": {
                    "description": "Site's title.",
                    "type": "string"
                }
            }
        },
        "users.User": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "active": {
                    "description": "Presence/Absence boolean. If false, one is not allowed to log-in (token is rejected),\nto interract with savla-dev infra in general (by default).",
                    "type": "boolean"
                },
                "country": {
                    "description": "Country of origin -- to help maintain global contacts.",
                    "type": "string"
                },
                "discord_username": {
                    "description": "Discord account/profile name.",
                    "type": "string"
                },
                "email_alias": {
                    "description": "Email alias in cloudflare email routing",
                    "type": "string"
                },
                "email_main": {
                    "description": "Email address main, personal",
                    "type": "string"
                },
                "full_name": {
                    "description": "Full Name of such user.",
                    "type": "string"
                },
                "gdpr_consent": {
                    "description": "Important GDPR consent boolean -- if false, user's details should be omitted!\nSEE more -- https://gdpr.eu/checklist/",
                    "type": "boolean"
                },
                "github_username": {
                    "description": "GitHub account/profile name (used for SSH public keys importing).",
                    "type": "string"
                },
                "gpg_keys": {
                    "description": "User's GPG public keys array.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "ID not used anymore as indexing is used differently now (searching by Name, index respects array implicit property).\nID       \tstring \t\t`json:\"id\"`",
                    "type": "string"
                },
                "roles": {
                    "description": "User's given roles -- a role labels array.\nRoles []roles.Role `json:\"roles\"`",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "spotify_link": {
                    "description": "Spotify link to one's profile.",
                    "type": "string"
                },
                "ssh_keys": {
                    "description": "User's SSH public keys array.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "token_hmac": {
                    "description": "Unique token used for auth purposes, SHA?-HMAC.",
                    "type": "string"
                },
                "wireguard_vpn": {
                    "description": "All Wireguard config objects -- an array.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/users.Wireguard"
                    }
                }
            }
        },
        "users.Users": {
            "type": "object",
            "properties": {
                "users": {
                    "description": "An array of User objects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/users.User"
                    }
                }
            }
        },
        "users.Wireguard": {
            "type": "object",
            "properties": {
                "allowed_ips": {
                    "description": "Allowed IP address(es) list on the side of server (vpn_gateway_server).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "device_name": {
                    "description": "Unique device name (for such user).",
                    "type": "string"
                },
                "ip_address": {
                    "description": "User's private IP address.",
                    "type": "string"
                },
                "permission": {
                    "description": "Is the user given permission to dial a connection?",
                    "type": "boolean"
                },
                "private_key": {
                    "description": "Wireguard private key.\nTODO: should be encrypted?",
                    "type": "string"
                },
                "public_key": {
                    "description": "Wireguard public key.",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "apiKey": {
            "type": "apiKey",
            "name": "X-Auth-Token",
            "in": "header"
        }
    }
}