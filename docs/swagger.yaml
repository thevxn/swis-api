basePath: /
definitions:
  alvax.AlvaxCommands:
    properties:
      command_list:
        items:
          $ref: '#/definitions/alvax.Command'
        type: array
      user:
        type: string
    type: object
  alvax.Command:
    properties:
      alias_names:
        items:
          type: string
        type: array
      argument_list:
        items:
          type: string
        type: array
      name:
        description: name as in the '/name' Telegram command syntax
        type: string
      parent_class:
        type: string
      required_argument:
        type: boolean
    type: object
  business.Business:
    properties:
      contact:
        items:
          $ref: '#/definitions/business.Contact'
        type: array
      ico:
        type: string
      id:
        type: string
      name_label:
        type: string
      role:
        type: string
      username:
        type: string
      vat_id:
        type: string
    type: object
  business.BusinessArray:
    properties:
      business:
        items:
          $ref: '#/definitions/business.Business'
        type: array
    type: object
  business.Contact:
    properties:
      content:
        type: string
      type:
        type: string
    type: object
  depot.Depot:
    properties:
      depot_items:
        items:
          $ref: '#/definitions/depot.Item'
        type: array
      owner_name:
        type: string
    type: object
  depot.Depots:
    properties:
      depots:
        items:
          $ref: '#/definitions/depot.Depot'
        type: array
    type: object
  depot.Item:
    properties:
      depot:
        type: string
      desc:
        type: string
      id:
        type: integer
      misc:
        type: string
    type: object
  dish.Socket:
    properties:
      dish_target:
        description: |-
          DishTarget is a string array, usually containing dish's host short name (e.g. frank)
          to be refered e.g. /dish/sockets/frank
        items:
          type: string
        type: array
      expected_http_code_array:
        description: If the Host is HTTP/S endpoint, one can specify which HTTP Result/Response
          codes are okay and not to alert upon
        items:
          type: integer
        type: array
      host_name:
        description: Hostname (server.random.com) or HTTP/S URI (http://endpoint.space)
        type: string
      path_http:
        description: PathHTTP is any URL the site is about to be tested on, e.g. /dish/sockets
        type: string
      port_tcp:
        description: |-
          Socket TCP port part
          Even default port 80 should be added here
        type: integer
      socket_description:
        description: More verbose name/description of the socket
        type: string
      socket_id:
        description: Socket ID, snake_cased for socket editing and deleting
        type: string
      socket_name:
        description: GEneric name of the socket, to be used in dish results as failed
          one endpoint for example
        type: string
    required:
    - host_name
    - port_tcp
    - socket_id
    type: object
  finance.Account:
    properties:
      account_currency:
        type: string
      account_iban:
        type: string
      account_items:
        items:
          $ref: '#/definitions/finance.Item'
        type: array
      account_name:
        type: string
      account_number:
        type: string
      account_owner:
        type: string
      account_swift_bic:
        type: string
      bank_code:
        description: bank codes like "0100" would be invalid as type int
        type: string
    type: object
  finance.Finance:
    properties:
      accounts:
        items:
          $ref: '#/definitions/finance.Account'
        type: array
    type: object
  finance.Item:
    properties:
      amount:
        type: number
      billing_date:
        type: string
      currency_code:
        type: string
      description:
        type: string
      id:
        type: integer
      misc:
        type: string
    type: object
  groups.Group:
    properties:
      id:
        type: string
      nickname:
        type: string
      role:
        type: string
    type: object
  groups.Groups:
    properties:
      groups:
        items:
          $ref: '#/definitions/groups.Group'
        type: array
    type: object
  users.User:
    properties:
      country:
        description: Country of origin -- to help maintain global contacts.
        type: string
      discord_username:
        description: Discord account/profile name.
        type: string
      full_name:
        description: Full Name of such user.
        type: string
      gdpr_consent:
        description: |-
          Important GDPR consent boolean -- if false, user's details should be omitted!
          SEE more -- https://gdpr.eu/checklist/
        type: boolean
      github_username:
        description: GitHub account/profile name (used for SSH public keys importing).
        type: string
      gpg_keys:
        description: User's GPG public keys array.
        items:
          type: string
        type: array
      name:
        description: "ID not used anymore as indexing is used differently now (searching
          by Name, index respects array implicit property).\nID       \tstring \t\t`json:\"id\"`"
        type: string
      roles:
        description: User's given roles -- a role labels array.
        items:
          type: string
        type: array
      ssh_keys:
        description: User's SSH public keys array.
        items:
          type: string
        type: array
      token_base64:
        description: Unique token used for auth purposes, base64'd.
        type: string
      wireguard_vpn:
        description: All Wireguard config objects -- an array.
        items:
          $ref: '#/definitions/users.Wireguard'
        type: array
    required:
    - name
    type: object
  users.Users:
    properties:
      users:
        description: An array of User objects
        items:
          $ref: '#/definitions/users.User'
        type: array
    type: object
  users.Wireguard:
    properties:
      allowed_ips:
        description: Allowed IP address(es) list on the side of server (vpn_gateway_server).
        items:
          type: string
        type: array
      device_name:
        description: Unique device name (for such user).
        type: string
      ip_address:
        description: User's private IP address.
        type: string
      permission:
        description: Is the user given permission to dial a connection?
        type: boolean
      private_key:
        description: |-
          Wireguard private key.
          TODO: should be encrypted?
        type: string
      public_key:
        description: Wireguard public key.
        type: string
    type: object
host: swapi.savla.su
info:
  contact:
    email: info@savla.dev
    name: API Support
    url: http://savla.dev/swapi
  description: dish swapi module
  license:
    name: MIT
    url: https://github.com/savla-dev/swis-api/blob/master/LICENSE
  termsOfService: http://swagger.io/terms/
  title: swis-api v5
  version: "5.1"
paths:
  /alvax/commands:
    get:
      description: get command array for alvax
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alvax.AlvaxCommands'
      summary: Get all alvax's commands
      tags:
      - alvax
  /alvax/commands/restore:
    post:
      consumes:
      - application/json
      description: update alvax JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload alvax dump backup -- restores all loaded commands
      tags:
      - alvax
  /business:
    get:
      description: get business complete list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/business.BusinessArray'
      summary: Get all businesses
      tags:
      - business
    post:
      description: add new business
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/business.Business'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/business.Business'
      summary: Add new business to the array
      tags:
      - business
  /business/{ico}:
    get:
      description: get business by :ico param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/business.Business'
      summary: Get business by its ICO (ID)
      tags:
      - business
  /business/restore:
    post:
      consumes:
      - application/json
      description: upload business JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload business dump backup -- restores all businesses
      tags:
      - business
  /depots:
    get:
      description: get depot complete list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/depot.Depots'
      summary: Get all depots and their users/owners
      tags:
      - depot
  /depots/{owner}:
    get:
      description: get depot list by :owner param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/depot.Depot'
      summary: Get depot list by Owner
      tags:
      - depot
  /depots/restore:
    post:
      consumes:
      - application/json
      description: upload depot JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload depot dump backup -- restores all depots
      tags:
      - depot
  /dish/restore:
    post:
      consumes:
      - application/json
      description: update dish JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload dish dump backup -- restores all loaded sockets
      tags:
      - dish
  /dish/sockets:
    get:
      description: get socket list, socket array
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Get all sockets list
      tags:
      - dish
    post:
      description: add new socket to socket array
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dish.Socket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dish.Socket'
      summary: Adding new socket to socket array
      tags:
      - dish
  /dish/sockets/{host}:
    get:
      description: get socket list by Host
      parameters:
      - description: dish instance name
        in: path
        name: host
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Get socket list by host
      tags:
      - dish
  /dish/sockets/{id}:
    delete:
      description: delete socket by its ID
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Delete socket by its ID
      tags:
      - dish
    put:
      description: update socket by its ID
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dish.Socket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dish.Socket'
      summary: Update socket by its ID
      tags:
      - dish
  /dish/test:
    head:
      responses:
        "200":
          description: OK
      tags:
      - dish
  /finance:
    get:
      description: get finance complete list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Finance'
      summary: Get all finance accounts
      tags:
      - finance
  /finance/accounts/{owner}:
    get:
      description: get finance account by :owner param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Account'
      summary: Get finance account by its Owner
      tags:
      - finance
  /finance/restore:
    post:
      consumes:
      - application/json
      description: upload accounts JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload finance accounts dump backup -- restores all finance accounts
      tags:
      - finance
  /group:
    post:
      description: add new group to groups array
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/groups.Group'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groups.Group'
      summary: Add new group to groups array
      tags:
      - groups
  /groups:
    get:
      description: get groups complete list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groups.Groups'
      summary: Get all groups
      tags:
      - groups
  /groups/{id}:
    get:
      description: get group by :id param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groups.Group'
      summary: Get group by ID
      tags:
      - groups
  /users:
    get:
      description: get users complete list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.Users'
      summary: Get all users
      tags:
      - users
    post:
      description: add new user to users array
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      summary: Add new user to users array
      tags:
      - users
  /users/{name}:
    get:
      description: get user by their :name param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      summary: Get user by Name
      tags:
      - users
  /users/{name}/keys/ssh:
    get:
      description: fetch :user ssh key array output in plain text
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      summary: Get User's SSH keys in plain text
      tags:
      - users
    post:
      description: add new SSH keys to :user param
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      summary: Add SSH public keys to User
      tags:
      - users
  /users/restore:
    post:
      consumes:
      - application/json
      description: update users JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload users dump backup -- restores all users
      tags:
      - users
swagger: "2.0"
