basePath: /
definitions:
  dish.Socket:
    properties:
      dish_target:
        description: |-
          DishTarget is a string array, usually containing dish's host short name (e.g. frank)
          to be refered e.g. /dish/sockets/frank
        items:
          type: string
        type: array
      expected_http_code_array:
        description: If the Host is HTTP/S endpoint, one can specify which HTTP Result/Response
          codes are okay and not to alert upon
        items:
          type: integer
        type: array
      host_name:
        description: Hostname (server.random.com) or HTTP/S URI (http://endpoint.space)
        type: string
      path_http:
        description: PathHTTP is any URL the site is about to be tested on, e.g. /dish/sockets
        type: string
      port_tcp:
        description: |-
          Socket TCP port part
          Even default port 80 should be added here
        type: integer
      socket_description:
        description: More verbose name/description of the socket
        type: string
      socket_id:
        description: Socket ID, snake_cased for socket editing and deleting
        type: string
      socket_name:
        description: GEneric name of the socket, to be used in dish results as failed
          one endpoint for example
        type: string
    required:
    - host_name
    - port_tcp
    - socket_id
    type: object
host: swapi.savla.su
info:
  contact:
    email: info@savla.dev
    name: API Support
    url: http://savla.dev/swapi
  description: dish swapi module
  license:
    name: MIT
    url: https://github.com/savla-dev/swis-api/blob/master/LICENSE
  termsOfService: http://swagger.io/terms/
  title: swis-api v5
  version: "5.1"
paths:
  /dish/restore:
    post:
      consumes:
      - application/json
      description: update dish JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload dish dump backup -- restores all loaded sockets
      tags:
      - dish
  /dish/sockets:
    get:
      description: get socket list, socket array
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Get all sockets list
      tags:
      - dish
    post:
      description: add new socket to socket array
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dish.Socket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dish.Socket'
      summary: Adding new socket to socket array
      tags:
      - dish
  /dish/sockets/{host}:
    get:
      description: get socket list by Host
      parameters:
      - description: dish instance name
        in: path
        name: host
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Get socket list by host
      tags:
      - dish
  /dish/sockets/{id}:
    delete:
      description: delete socket by its ID
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Delete socket by its ID
      tags:
      - dish
    put:
      description: update socket by its ID
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dish.Socket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dish.Socket'
      summary: Update socket by its ID
      tags:
      - dish
  /dish/test:
    head:
      responses:
        "200":
          description: ""
      tags:
      - dish
swagger: "2.0"
